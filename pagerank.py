import networkx as nx


def init_graph(n):
    G = nx.DiGraph(nx.path_graph(n))
    return G


def get_incoming(G,i):
    return [a for a in G.adj[i].keys()]


def get_score(G,i):
    return G.nodes[i]['score']


def get_outgoing_n(G,i):
    return len(G.adj[i])


def compute_score(G,i,damping,n):
    return (1-damping)/n + sum([damping*get_score(G,node)/get_outgoing_n(G,node) for node in get_incoming(G,i)])


def pagerank_iteration(G,damping,n):
    return [compute_score(G,i,damping,n) for i in range(n)]


def difference(a,b):
    return sum([abs(a[i]-b[i]) for i in range(len(a))])


def pagerank(G,alpha,cutoff=0.0001):

    n = len(G.nodes)
    values = {}
    for i in range(n):
        values[i] = 1/n

    nx.set_node_attributes(G,values,'score')

    while(True):
        updated_values = pagerank_iteration(G, alpha, n)
        diff = difference(updated_values, values)
        if diff < cutoff:
            break
        for j in range(n):
            values[j] = updated_values[j]
        nx.set_node_attributes(G, values, 'score')
    return values


if __name__ == "__main__":
    damping = 0.85
    cutoff = 0.001
    n = 4
    G = init_graph(n)

    pagerank(G,damping,cutoff)
    # {0: 0.175517960850563, 1: 0.32448203914943685, 2: 0.32448203914943685, 3: 0.175517960850563}
    nx.pagerank(G)
    # {0: 0.17543839772251535, 1: 0.32456160227748465, 2: 0.32456160227748465, 3: 0.17543839772251535}

    G = nx.DiGraph(nx.karate_club_graph())
    pagerank(G,damping,cutoff)
    # {0: 0.09708639460165969, 1: 0.052911521914880515, 2: 0.05707813815149133, 3: 0.03586497712025596, 4: 0.021995418651744734, 5: 0.029137765609532046, 6: 0.029137765609532046, 7: 0.024480414344229207, 8: 0.02974278778877054, 9: 0.01429553031607466, 10: 0.021995418651744734, 11: 0.009562604766922158, 12: 0.014642194349485046, 13: 0.029514616616883618, 14: 0.014512192799412498, 15: 0.014512192799412498, 16: 0.016805598526211673, 17: 0.014551261424128426, 18: 0.014512192799412498, 19: 0.019585463696782837, 20: 0.014512192799412498, 21: 0.014551261424128426, 22: 0.014512192799412498, 23: 0.03149484261487401, 24: 0.021076370119451845, 25: 0.021008177966472405, 26: 0.015033198050185756, 27: 0.02562275690690774, 28: 0.01956471698583163, 29: 0.026267667981155422, 30: 0.024564845152902283, 31: 0.037121380637058735, 32: 0.07174822836138216, 33: 0.10099771766225786}{0: 0.175517960850563, 1: 0.32448203914943685, 2: 0.32448203914943685, 3: 0.175517960850563}
    nx.pagerank(G)
    # {0: 0.09700181758983709, 1: 0.05287839103742701, 2: 0.057078423047636745, 3: 0.03586064322306479, 4: 0.021979406974834498, 5: 0.02911334166344221, 6: 0.02911334166344221, 7: 0.024490758039509182, 8: 0.029765339186167028, 9: 0.014308950284462801, 10: 0.021979406974834498, 11: 0.009564916863537148, 12: 0.014645186487916191, 13: 0.029536314977202986, 14: 0.014535161524273825, 15: 0.014535161524273825, 16: 0.016785378110253487, 17: 0.014558859774243493, 18: 0.014535161524273825, 19: 0.019604416711937293, 20: 0.014535161524273825, 21: 0.014558859774243493, 22: 0.014535161524273825, 23: 0.03152091531163228, 24: 0.021075455001162945, 25: 0.021005628174745786, 26: 0.015043395360629753, 27: 0.025638803528350497, 28: 0.01957296050943854, 29: 0.02628726283711208, 30: 0.02458933653429248, 31: 0.03715663592267942, 32: 0.07169213006588289, 33: 0.1009179167487121}

